{"name":"Go-cheat-sheet","tagline":"Golang cheat sheet","body":"# Overview\r\n\r\n- [Variables](#Variables)\r\n- [Arrays](#Arrays)\r\n- [Slices](#Slices)\r\n- [Maps](#Maps)\r\n- [Control Structures](#Control-Structures)\r\n- [Functions](#Functions)\r\n- [Closures](#Closures)\r\n\r\n## <a name=\"Variables\"></a>Variables\r\n\r\n```go\r\nconst title =\"Best Series Ever\"\r\nvar season int = 6\r\nepisodes := 22\r\n\r\nvar(\r\n  a = 5\r\n  b = 6.54\r\n  c = \"hello!\"\r\n  )\r\n```\r\n\r\n## <a name=\"Arrays\"></a>Arrays\r\n\r\n```go\r\nvar primes [5]int\r\nprimes[0]=2\r\n\r\nletters := [3]string{\"a\",\"b\",\"c\"}\r\n\r\ntemps :=[3]float64{\r\n  1.2,\r\n  2.3,\r\n  3.4,\r\n}\r\n```\r\n\r\n## <a name=\"Slices\"></a>Slices\r\n\r\n```go\r\nvar a []float64\r\nb := make([]string)\r\narr := [5]int{1,2,3,4,5}\r\nx := arr[0:3]\r\n```\r\n\r\n## <a name=\"Maps\"></a>Maps\r\n\r\n```go\r\nvar keyValue map[int]string\r\nkeyValue[1] = \"boo!\"\r\ndelete(keyvalue,1)\r\ny := make(map[int]int)\r\n```\r\n\r\n## <a name=\"Control-Structures\"></a>Control Structures\r\n\r\n```go\r\n\r\nif i == 1{\r\n  //Hey it's one\r\n}else if i==2{\r\n  //It's two\r\n}else{\r\n  //Oh, it's neither\r\n}\r\n\r\nvar a map[int]int\r\nmap[1] = 1\r\nif num,status := map[1]; status{\r\n  fmt.Println(num)\r\n}\r\n\r\nswitch i{\r\n  case 1: //This one if i is 1. No need of a break\r\n  case 2: fallthrough//This one if i is 2 and then it executes the next case\r\n  case 3: //This one if i is 3\r\n  case 4,5,6,7 : //Yay! All of these will work\r\n  default: //This one when nothing matches\r\n}\r\n\r\ni:=1\r\nfor i<= 100{\r\n  fmt.Println(i)\r\n  i = i+1\r\n}\r\n\r\nfor i:=1; i< 1=100;i++{\r\n  fmt.Println(i)\r\n}\r\n\r\narr :=[5]int{1,2,3,4,5}\r\nfor n := range arr{\r\n  fmt.Println(n)\r\n}\r\n\r\n```\r\n\r\n## <a name=\"Functions\"></a>Functions\r\n\r\n```go\r\n//Function\r\nfunc sample(a,b int) int {\r\n  return a*b\r\n}\r\n\r\n//Function returning multiple values\r\nfunc otherFunc(a string, b, c float64) (string, float64) {\r\n  return a, b*c\r\n}\r\n\r\n//Variadic functions\r\nfunc sum(args ...int) int{\r\n  sum:=0\r\n  for _,v := range args{\r\n    total +=v\r\n  }\r\n  return total\r\n}\r\n\r\n//Calling the functions\r\nfunc main(){\r\n  a := sample(1,2)\r\n  b, c := otherFunc(\"String\", 1.2, 2.3)\r\n  d := sum(1,2,3,4,5,6)\r\n}\r\n```\r\n\r\n## <a name=\"Closures\"></a>Closures\r\n\r\n```go\r\nfunc makeEvenGenerator() func() uint {\r\n    i := uint(0)\r\n    return func() (ret uint) {\r\n        ret = i\r\n        i += 2\r\n        return\r\n    }\r\n}\r\nfunc main() {\r\n    nextEven := makeEvenGenerator()\r\n    fmt.Println(nextEven()) // 0\r\n    fmt.Println(nextEven()) // 2\r\n    fmt.Println(nextEven()) // 4\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}